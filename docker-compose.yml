version: "3"

volumes:
    prometheus_data: {}
    grafana_data: {}
    bolt_data: {}
    log_data: {}
    letsencrypt: {}

services:
  simulator:
    container_name: simulator
    volumes:
        - bolt_data:/app/boltDB
        - log_data:/app/logs/
    environment:
        - MONGO_URI=${MONGO_URI}
    build: .
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.simulator.rule=Host(`pogpvp.com`)"
      - "traefik.http.routers.simulator.tls=true"
      - "traefik.http.routers.simulator.entrypoints=websecure"
      - "traefik.http.routers.simulator.tls.certresolver=myresolver"
      - "traefik.port=8080"
  mongo1:
      container_name: mongo1
      image: mongo
      command:
        - mongod
        - "--bind_ip_all"
        - "--replSet"
        - "rs0"
        - "--auth"
        - "--keyFile"
        - "/mongo/key/keyfile"
      volumes:
        - ./mongo/db1:/data/db
        - ./mongo/backups:/backups
        - ./mongo/key/keyfile:/mongo/key/keyfile
      restart: always
      labels:
        - "traefik.enable=false"
      depends_on:
        - grafana
  mongo2:
      container_name: mongo2
      image: mongo
      command: 
        - mongod
        - "--bind_ip_all"
        - "--replSet"
        - "rs0"
        - "--auth"
        - "--keyFile"
        - "/mongo/key/keyfile"
      volumes:
        - ./mongo/db2:/data/db
        - ./mongo/backups:/backups
        - ./mongo/key/keyfile:/mongo/key/keyfile
      restart: always
      depends_on:
        - mongo1
      labels:
        - "traefik.enable=false"
  mongo3:
      container_name: mongo3
      image: mongo
      command: 
        - mongod
        - "--bind_ip_all"
        - "--replSet"
        - "rs0"
        - "--auth"
        - "--keyFile"
        - "/mongo/key/keyfile"
      volumes:
        - ./mongo/db3:/data/db
        - ./mongo/backups:/backups
        - ./mongo/key/keyfile:/mongo/key/keyfile
      restart: always
      depends_on:
        - mongo2
      labels:
        - "traefik.enable=false"
  prometheus:
    image: "prom/prometheus"
    container_name: prometheus
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prom.pogpvp.com`)"
      - "traefik.http.routers.prometheus.tls=true"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.routers.prometheus.tls.certresolver=myresolver"
      - "traefik.port=9090"
      - "traefik.http.routers.prometheus.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=${USR_PSWD}"
    volumes:
     - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
     - prometheus_data:/prometheus
    command: 
      - "--config.file=/etc/prometheus/prometheus.yml" 
      - "--web.console.templates=/etc/prometheus/consoles" 
      - "--web.console.libraries=/etc/prometheus/console_libraries" 
      - "--storage.tsdb.path=/prometheus" 
      - "--storage.tsdb.retention=168h"
      - "--storage.tsdb.retention.size=2GB"
    restart: always
    deploy:
        resources:
          limits:
            cpus: '0.10'
            memory: 45M
    depends_on:
      - simulator
  grafana:
    image: "grafana/grafana:latest"
    container_name: grafana
    #environment:
      #- GF_INSTALL_PLUGINS=https://github.com/raintank/crate-datasource/archive/master.zip;crate-datasource,grafana-clock-panel,grafana-worldmap-panel,natel-plotly-panel
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`graph.pogpvp.com`)"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=myresolver"
      - "traefik.port=3000"
    restart: always
    volumes:
        - grafana_data:/var/lib/grafana
        - ./grafana/datasources:/etc/grafana/datasources
        - ./grafana/dashboards:/etc/grafana/dashboards
        - ./grafana/setup.sh:/setup.sh
    deploy:
        resources:
          limits:
            cpus: '0.10'
            memory: 50M
    depends_on:
      - prometheus
  traefik:
        image: "traefik:v2.2"
        container_name: "traefik"
        command:
          #- "--log.level=DEBUG"
          - "--providers.docker=true"
          - "--providers.docker.exposedbydefault=false"
          - "--entrypoints.web.address=:80"
          - "--entrypoints.websecure.address=:443"
          - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
          #- "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
          - "--certificatesresolvers.myresolver.acme.email=blizzz93@gmail.com"
          - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
        ports:
          - "80:80"
          - "443:443"
        labels:
          #middleware compressor
         - "traefik.http.middlewares.test-compress.compress=true"
         # middleware redirect  
         - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"  
         # global redirect to https  
         - "traefik.http.routers.redirs.rule=hostregexp(`{host:.+}`)"  
         - "traefik.http.routers.redirs.entrypoints=web"  
        volumes:
          - "letsencrypt:/letsencrypt/"
          - "/var/run/docker.sock:/var/run/docker.sock:ro"
        logging:
          options:
              max-size: '25m'
              max-file: '3'
        depends_on:
            - mongo3
